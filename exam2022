//introductions
# This is a basic workflow to help you get started with Actions

name: solve exam2022_problem

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.



//Distinguish between sizeof and strlen
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc" ;
	char arr2[] = {'a','b','c',0};
	printf("%d\n",strlen(arr1)); //output:3
	printf("%d\n",sizeof(arr1)); //output:4
  
  //why ?
	//For strlen, '0' is not counted towards the string length
	//However, for sizeof, the string length is still counted

	return 0;
}


If arr1 does not contain a 0.
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc" ;
	char arr2[] = {'a','b','c'};
	printf("%d\n",strlen(arr1)); //output:3
	printf("%d\n",sizeof(arr1)); //output:Random value
	it will be random value .
	
        return 0 ;
  }

'\0'是字符串结束的标志，不算做字符串的内容



//The job task before that
//Item A job
//Binary one-time equations（二元一次方程）
#include<stdio.h>
#include<math.h>
int main ()
{
	float a,b,c;
	float x1,x2;
	float A,B,C,D;
	scanf("%f%f%f",&a,&b,&c);
	A=sqrt(b*b-4*a*c); //deta:∆
	B=(-b+A);
	C=(-b-A);
	D=2*a;
	x1=B/D;
	x2=C/D; //The values of the two solutions
	printf("x1=%.2f,x2=%.2f",x1,x2); //Prints out the results
	return 0;
}


Class notes
#include<stdio.h>
int main()
{
	int a,b;
	scanf("%d",&a);
	if (a)
	{
		a=2;
		b=3;
	}
	else if(a==0)  //a这里得有==
	{
		b=2;
	}else 
	{
		b=1;
	}
	printf("%d",b);
	return 0;
}


Practice
#include<stdio.h>
int main()
{
	float h = 0.15 ;
	int n = 0 ;

	while(h<=8844000)
	{
		h=2*h;
		n=n+1;
	}
	printf("%d",n) ;
	return 0;
}


//悬空else
//注意加{}
//代码要规范
Branch (select) statements
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0 ;
	int b = 2 ;
	if(a == 1)
		if(b == 2)
			printf("hehe\n");
		else
			printf("haha\n"); 
			//无论这里的else和第一个if对齐还是与第二个if对齐，结果均一样
			//else只会和与他距离最近的If发挥作用
	return 0;
}


//EOF
//EOF = end of file ->值-1
#include<stdio.h>

int main()
{
	int ch = 0 ;
	// when you input:ctrl + Z ,it will be over .
	while((ch=getchar())!=EOF)
	{
		putchar(ch) ;
	}
 return 0;
 
}


//do-while
//输入密码程序
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int main()
{


	int ch = 0 ;
	int cet = 0 ;
	char password[16] = {0};
	printf("请输入密码：\n");
	scanf("%s",password);

	while((ch=getchar())!='\n')
	{
		;
	}
        // 缓冲区还剩一个'\n'
	// 读取下'\n'
	printf("请确认密码(Y\\N)：\n"); // 两个\\
	cet = getchar() ; // Y/N
	do
	{
		
	if(cet == 'Y')
	{
		printf("确认成功\n");
		break;
	}
	else if(cet =='N')
	{
		printf("请再次输入密码：\n");
		
	    scanf("%s",password);
		while((ch=getchar())!='\n')
	{
		;
	}
		printf("请再次确认密码(Y\\N)：\n");
		cet = getchar(); //这里如若输入N，则将循环下去，直到密码确认成功。

	}
	}while(cet != 'Y'); //先循环再判断
	return 0;
}


//转载
//另一种密码输入系统
//strcmp库函数的应用
#include <string.h>
#include <stdio.h>
int main()
{
	char arr[20] = { 0 };
	//假设正确的密码是字符串“2022”，如何比较？
	int m = 0;
	for (m = 0; m < 3; m++)
	{
		printf("请输入密码：");
		scanf("%s", arr);
		//if (arr == "2022")//这样的写法是错误的，两个字符串比较不能使用==来比较
		//应该使用字符串函数strcmp
		if(strcmp(arr,"2022")==0)
		{

			printf("密码正确\n");
			printf("进入系统");
			break;
		}
			else
			{
				printf("密码错误\n");
			}
		
	}
	if (m == 3)
	{
		printf("退出系统\n");//最多输入三次密码
	}
	return 0;
}


//代码一定要自己敲一遍
#include<stdio.h>
#include<string.h>
int main()
{
	int i = 0 ;

	char password[20] ={ 0 };

	for(i=0; i<3; i++)
	{
			printf("请输入密码：\n");
		scanf("%s",password);
		if(strcmp(password,"2022") == 0) //这里的strcmp是一个库函数，可以用来比较两个字符串是否相等。
		//若相等，则strcmp(password,"2022")的值为0.
		//如果第一个password大于第二的"2022"，输出一个大于0的数
		//如果第一个password小于第二的"2022"，输出一个小于0的数
		{
			printf("密码正确\n");
			break ;
		}
		else
		{
			printf("密码错误\n");
		}
	}
	if(i == 3)
	{
		printf("退出系统\n");
	}
	return 0 ;

}
//关于for循环中的省略初始化、调整、判断
//About the omission of initialization, adjustment, judgment in the for loop
#include<stdio.h>
int main ()
{
	int i = 0 ;
	int j = 0 ;
	for(;i<10;i++)
	{
		for(;j<10;j++) //在这里，j的初始值为0，但j最终打印完10个“呵呵呵”后，变成10，导致下面将不进行循环。
		{
			printf("呵呵呵\n");
		}
	}
	return 0; 
}
//最终结果将打印10个“呵呵呵”


//变种2
//也可执行
#include<stdio.h>
int main ()
{
	int i = 0 ;
	int j = 0 ;
	
	for(i=0, j=0; i<2&j<5; ++i, j++)//循环从i=0,j=0开始，满足条件则执行，++i和j++一样的输出结果，最终打印出2个hehehe。
	{
		printf("hehehe\n");
	}
	return 0;
}


//该题循环进行几次？
//答案进行0次。
#include<stdio.h>
int main ()
{
	int i = 0;
	int k = 0;
	for(i=0, k=0; k=0; i++, k++)//这里的条件为一个赋值语句！
	//所以这个的条件总是为0，为假，不执行循环
		k++;
	
	return 0;
}


//查找数组中的某个数
#include<stdio.h>
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int k = 7 ;
	//写一个代码，再arr数组（有序的）中找到7
	int i = 0 ;
	int sz = sizeof(arr)/sizeof(arr[0]); //整个数组大小
	for(i=0; i<sz; i++)
	{
		if(k == arr[i])
		{
			printf("找到了，下标是：%d\n",i);
			break ;
		}
	}
	if(i == sz)
		printf("找不到\n");
	return 0;
}


//二分查找算法
//折半查找算法
#include<stdio.h>
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int k = 17 ;
	//
	int sz = sizeof(arr)/sizeof(arr[0]); //数组大小
	int left = 0; //左下标
	int right = sz - 1 ; //右下标

	while(left<=right) //使用二分查找算法的条件：左下标<=右下标
	{
		int mid = (left + right)/2; //中间元素的下标
		if(arr[mid] > k)
		{
			right = mid - 1 ; //新的右下标

		}
		else if(arr[mid] < k)
		{
			left = mid + 1 ; //新的左下标
		}
		else
		{
			printf("找到了，下标是：%d\n", mid );
			break ;
		}
	}
	if(left > right) //不满足二分查找法使用的条件，则找不到这个数。
	{
		printf("找不到\n");
	}
	return 0;
}


//演示多个字符从两端移动，向中间汇聚。
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>

int main()
{
	//
	//welcome to china!!!!!!
	//######################
	//w####################!
	//we##################!!
	//wel################!!!
	//...
	//welcome to china!!!!!!
	
	//因为数组的最后有一个'\0'
	//char arr[] = "abc" ;
	//[a b c \0]
	// 0 1 2 3
	//c的下标即为4-2
	
	char arr1[] = "welcome to china!!!!!!";
	char arr2[] = "######################"; //将两个数组初始化
	int left = 0;
	//int right = sizeof(arr1)/sizeof(arr1[0])-2; //为什么-2的原因如上所示
	int right = strlen(arr1) - 1 ; //这种写法更容易理解

	while(left<=right) //循环的条件
	{
		arr2[left] = arr1[left];
		arr2[right] = arr1[right]; //将arr2两端的字符用arr1中两端的字符代替
		printf("%s\n",arr2);
		//休息一秒
		Sleep(1000); //单位是毫秒 //头文件是windows.h
	        system("cls"); //执行系统命令的一个函数-cls - 清空屏幕 //头文件是stdlib.h
		left++ ;
		right-- ; //向中间移动

	}
	printf("%s\n", arr2 );
	return 0;
}


//算法实现
//a最大
//b次之
//c最小
#include<stdio.h>
int main()
{
	int a = 0 ;
	int b = 0 ;
	int c = 0 ;
	scanf("%d%d%d",&a,&b,&c); //输入 2 1 3
	if(b>=a)
	{
		int temp = 0 ;
		temp = b ;
		b = a ;
		a = temp ; //交换变量的值
	}
	if(c>=a)
	{
		int temp = 0 ;
		temp = c ;
		c = a ;
		a = temp ;
	}
	if(c>=b)
	{
		int temp = 0 ;
		temp = c ;
		c = b ;
		b = temp ;
	}
	printf("%d %d %d", a, b, c);
	return 0 ;
}


//辗转相除法✨
//求两个数m、n的最大公约数
#include<stdio.h>
int main()
{
	int m = 0 ;
	int n = 0 ;
	int r = 0 ;//创建一个变量来储存余数。
	scanf("%d%d",&m,&n);//24 12
	while(r = m%n) //余数为0，循环结束
	{		
		//r = m%n ;// 可以将这个式子放在条件中，可以减少一些步骤。
		m = n ; //
		n = r ;
	}
	printf("%d",n);
    return 0;
}


//统计1000年到2000年内的所有闰年的年份
//并计算一共有多少天
#include<stdio.h>
int main()
{
	int year = 0 ;
	int count = 0 ;
	for(year=1000;year<=2000;year++)
	{
		if((year%4==0) && (year%100!=0) ||(year%400==0)) //为闰年的条件
		{
			printf("%d ",year);
			count++ ; //标记
		}
	}
	printf("\n一共有：%d天\n", count) ;
	return 0;
}


//打印100到200之间的素数
#include<stdio.h>
int main()
{
	int i = 0 ;
	int count = 0 ;
	for(i=100;i<=200;i++)
	{
		//判断是否为素数的条件
		//1.试除法
		int j = 0 ;
		for(j=2; j <= sqrt(i); j++)
		{
			if(i%j == 0)
				break ; //素数的特点是其因数（不叫公倍数）只有 1和它本身
		}
		if(i==j)
		{
			printf("%d ",i);
			count++; //如果i除以j的余数为0，且i和j相等，便可以判断出这个数是素数。
		}
	}
	printf("\n一共有%d个\n",count);
	return 0;
}
