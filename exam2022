
🤡🤡🤡
//Distinguish between sizeof and strlen
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc" ;
	char arr2[] = {'a','b','c',0};
	printf("%d\n",strlen(arr2)); //output:3
	printf("%d\n",sizeof(arr2)); //output:4
  
  //why ?
	//For strlen, '0' is not counted towards the string length
	//However, for sizeof, the string length is still counted

	return 0;
}


If arr2 does not contain a 0.
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc" ;
	char arr2[] = {'a','b','c'};
	printf("%d\n",strlen(arr2)); //output:Random value, it will be random value.
	printf("%d\n",sizeof(arr2)); //output:3
	
	printf("%d\n",strlen(arr1)); //3
	printf("%d\n",sizeof(arr1)); //4	
        return 0 ;
  }

'\0'是字符串结束的标志，不算做字符串的内容



Class notes
#include<stdio.h>
int main()
{
	int a,b;
	scanf("%d",&a);
	if (a)
	{
		a=2;
		b=3;
	}
	else if(a==0)  //a这里得有==
	{
		b=2;
	}else 
	{
		b=1;
	}
	printf("%d",b);
	return 0;
}


Practice
#include<stdio.h>
int main()
{
	float h = 0.15 ;
	int n = 0 ;

	while(h<=8844000)
	{
		h=2*h;
		n=n+1;
	}
	printf("%d",n) ;
	return 0;
}


👻👻👻

分支与循环



//悬空else
//注意加{}
//代码要规范
Branch (select) statements
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0 ;
	int b = 2 ;
	if(a == 1)
		if(b == 2)
			printf("hehe\n");
		else
			printf("haha\n"); 
			//无论这里的else和第一个if对齐还是与第二个if对齐，结果均一样
			//else只会和与他距离最近的If发挥作用
	return 0;
}


//EOF
//EOF = end of file ->值-1✨
#include<stdio.h>

int main()
{
	int ch = 0 ;
	// when you input:ctrl + Z ,it will be over .
	while((ch=getchar())!=EOF)
	{
		putchar(ch) ;
	}
 return 0;
 
}


//do-while
//输入密码程序
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int main()
{


	int ch = 0 ;
	int cet = 0 ;
	char password[16] = {0};
	printf("请输入密码：\n");
	scanf("%s",password);

	while((ch=getchar())!='\n')
	{
		;
	}
        // 缓冲区还剩一个'\n'
	// 读取下'\n'
	printf("请确认密码(Y\\N)：\n"); // 两个\\
	cet = getchar() ; // Y/N
	do
	{
		
	if(cet == 'Y')
	{
		printf("确认成功\n");
		break;
	}
	else if(cet =='N')
	{
		printf("请再次输入密码：\n");
		
	    scanf("%s",password);
		while((ch=getchar())!='\n')
	{
		;
	}
		printf("请再次确认密码(Y\\N)：\n");
		cet = getchar(); //这里如若输入N，则将循环下去，直到密码确认成功。

	}
	}while(cet != 'Y'); //先循环再判断
	return 0;
}


//转载✨
//另一种密码输入系统
//strcmp库函数的应用
#include <string.h>
#include <stdio.h>
int main()
{
	char arr[20] = { 0 };
	//假设正确的密码是字符串“2022”，如何比较？
	int m = 0;
	for (m = 0; m < 3; m++)
	{
		printf("请输入密码：");
		scanf("%s", arr);
		//if (arr == "2022")//这样的写法是错误的，两个字符串比较不能使用==来比较
		//应该使用字符串函数strcmp
		if(strcmp(arr,"2022")==0)
		{

			printf("密码正确\n");
			printf("进入系统");
			break;
		}
			else
			{
				printf("密码错误\n");
			}
		
	}
	if (m == 3)
	{
		printf("退出系统\n");//最多输入三次密码
	}
	return 0;
}


//代码一定要自己敲一遍
#include<stdio.h>
#include<string.h>
int main()
{
	int i = 0 ;

	char password[20] ={ 0 };

	for(i=0; i<3; i++)
	{
			printf("请输入密码：\n");
		scanf("%s",password);
		if(strcmp(password,"2022") == 0) //这里的strcmp是一个库函数，可以用来比较两个字符串是否相等。
		//若相等，则strcmp(password,"2022")的值为0.
		//如果第一个password大于第二的"2022"，输出一个大于0的数
		//如果第一个password小于第二的"2022"，输出一个小于0的数
		{
			printf("密码正确\n");
			break ;
		}
		else
		{
			printf("密码错误\n");
		}
	}
	if(i == 3)
	{
		printf("退出系统\n");
	}
	return 0 ;

}
//关于for循环中的省略初始化、调整、判断
//About the omission of initialization, adjustment, judgment in the for loop
#include<stdio.h>
int main ()
{
	int i = 0 ;
	int j = 0 ;
	for(;i<10;i++)
	{
		for(;j<10;j++) //在这里，j的初始值为0，但j最终打印完10个“呵呵呵”后，变成10，导致下面将不进行循环。
		{
			printf("呵呵呵\n");
		}
	}
	return 0; 
}
//最终结果将打印10个“呵呵呵”


//变种2
//也可执行
#include<stdio.h>
int main ()
{
	int i = 0 ;
	int j = 0 ;
	
	for(i=0, j=0; i<2&j<5; ++i, j++)//循环从i=0,j=0开始，满足条件则执行，++i和j++一样的输出结果，最终打印出2个hehehe。✨
	{
		printf("hehehe\n");
	}
	return 0;
}


//该题循环进行几次？
//答案进行0次。
#include<stdio.h>
int main ()
{
	int i = 0;
	int k = 0;
	for(i=0, k=0; k=0; i++, k++)//这里的条件为一个赋值语句！
	//所以这个的条件总是为0，为假，不执行循环
		k++;
	
	return 0;
}


//查找数组中的某个数
#include<stdio.h>
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int k = 7 ;
	//写一个代码，再arr数组（有序的）中找到7
	int i = 0 ;
	int sz = sizeof(arr)/sizeof(arr[0]); //整个数组大小
	for(i=0; i<sz; i++)
	{
		if(k == arr[i])
		{
			printf("找到了，下标是：%d\n",i);
			break ;
		}
	}
	if(i == sz)
		printf("找不到\n");
	return 0;
}


//二分查找算法
//折半查找算法✨
#include<stdio.h>
int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int k = 17 ;
	//
	int sz = sizeof(arr)/sizeof(arr[0]); //数组大小
	int left = 0; //左下标
	int right = sz - 1 ; //右下标

	while(left<=right) //使用二分查找算法的条件：左下标<=右下标
	{
		int mid = (left + right)/2; //中间元素的下标
		if(arr[mid] > k)
		{
			right = mid - 1 ; //新的右下标

		}
		else if(arr[mid] < k)
		{
			left = mid + 1 ; //新的左下标
		}
		else
		{
			printf("找到了，下标是：%d\n", mid );
			break ;
		}
	}
	if(left > right) //不满足二分查找法使用的条件，则找不到这个数。
	{
		printf("找不到\n");
	}
	return 0;
}


//演示多个字符从两端移动，向中间汇聚。
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>

int main()
{
	//
	//welcome to china!!!!!!
	//######################
	//w####################!
	//we##################!!
	//wel################!!!
	//...
	//welcome to china!!!!!!
	
	//因为数组的最后有一个'\0'
	//char arr[] = "abc" ;
	//[a b c \0]
	// 0 1 2 3
	//c的下标即为4-2
	
	char arr1[] = "welcome to china!!!!!!";
	char arr2[] = "######################"; //将两个数组初始化
	int left = 0;
	//int right = sizeof(arr1)/sizeof(arr1[0])-2; //为什么-2的原因如上所示
	int right = strlen(arr1) - 1 ; //这种写法更容易理解

	while(left<=right) //循环的条件
	{
		arr2[left] = arr1[left];
		arr2[right] = arr1[right]; //将arr2两端的字符用arr1中两端的字符代替
		printf("%s\n",arr2);
		//休息一秒
		Sleep(1000); //单位是毫秒 //头文件是windows.h
	        system("cls"); //执行系统命令的一个函数-cls - 清空屏幕 //头文件是stdlib.h
		left++ ;
		right-- ; //向中间移动

	}
	printf("%s\n", arr2 );
	return 0;
}


//算法实现
//a最大
//b次之
//c最小
#include<stdio.h>
int main()
{
	int a = 0 ;
	int b = 0 ;
	int c = 0 ;
	scanf("%d%d%d",&a,&b,&c); //输入 2 1 3
	if(b>=a)
	{
		int temp = 0 ;
		temp = b ;
		b = a ;
		a = temp ; //交换变量的值
	}
	if(c>=a)
	{
		int temp = 0 ;
		temp = c ;
		c = a ;
		a = temp ;
	}
	if(c>=b)
	{
		int temp = 0 ;
		temp = c ;
		c = b ;
		b = temp ;
	}
	printf("%d %d %d", a, b, c);
	return 0 ;
}


//辗转相除法✨
//求两个数m、n的最大公约数
#include<stdio.h>
int main()
{
	int m = 0 ;
	int n = 0 ;
	int r = 0 ;//创建一个变量来储存余数。
	scanf("%d%d",&m,&n);//24 12
	while(r = m%n) //余数为0，循环结束
	{		
		//r = m%n ;// 可以将这个式子放在条件中，可以减少一些步骤。
		m = n ; //
		n = r ;
	}
	printf("%d",n);
    return 0;
}


//统计1000年到2000年内的所有闰年的年份
//并计算一共有多少天
#include<stdio.h>
int main()
{
	int year = 0 ;
	int count = 0 ;
	for(year=1000;year<=2000;year++)
	{
		if((year%4==0) && (year%100!=0) ||(year%400==0)) //为闰年的条件
		{
			printf("%d ",year);
			count++ ; //标记
		}
	}
	printf("\n一共有：%d天\n", count) ;
	return 0;
}


//打印100到200之间的素数
#include<stdio.h>
int main()
{
	int i = 0 ;
	int count = 0 ;
	for(i=101;i<=200;i+=2) //素数一定是奇数
	{
		//判断是否为素数的条件
		//1.试除法
		int j = 0 ;
		for(j=2; j <= sqrt(i); j++) // j<i可以被优化为j<=sqrt(i)
		{
			if(i%j == 0)
				break ; //素数的特点是其因数（不叫公倍数）只有 1和它本身
		}
		if(i==j)
		{
			printf("%d ",i);
			count++; //如果i除以j的余数为0，且i和j相等，便可以判断出这个数是素数。
		}
	}
	printf("\n一共有%d个\n",count);
	return 0;
}


//数字9的个数
#include<stdio.h>
int main()
{
	int i = 0 ;
	int count = 0 ;
	for(i=1; i<=100; i++) //从1到100内9的个数
	{
		if(i%10 == 9) //个位为9的
		{
			count++ ;
		}
		if(i/10==9) //十位为9的 //注意99，两个9
			count++ ;
	}
	printf("count= %d\n",count);
	return 0;
}


//求1/1-1/2+1/3-1/4+...-1/100的值
#include<stdio.h> //比较繁
int main()
{
	float sum1 = 0 ,sum2 = 0 ;
	int i = 0 ,j = 0 ;
	for(i=1; i<=100; i+=2)
	{
		sum1 += 1.0 / i; //注意要想得到小数的结果，使用1.0
	}
	for(j=2; j<=100; j+=2)
	{
		sum2 += (-1.0) / j;
	}
	printf("%f",sum1+sum2);
	return 0;
}

#include<stdio.h> //用flag来代表+1，-1✨
int main()
{
	double sum = 0.0;
	int flag = 1;
	int i = 0 ;
	for(i=1; i<=100; i++)
	{
		sum += flag * 1.0 / i;
		flag = -flag ; //标记
	}
	printf("%lf",sum);
	return 0;
}


//！！！！！！
//期末考试最后一个解答题
//求10个整数的最大值
#include<stdio.h>
int main()
{
	int arr[] = {-1,-2,-3,-4,-5,-6,-7,-8,-9,-10};
	int i = 0 ;
	int max = arr[0] ; //最大值  

	//如果初始化max为0，正如这个数组所示，结果输出错误，
	//并且无论初始化为任意一个常数，都有可能会对结果产生影响
	//所以将max初始化为数组arr中的任意一个整数的值

	int sz = sizeof(arr) / sizeof(arr[0]);
	for(i=0; i<sz; i++) //这里的i可以从1开始
	{
		if(arr[i] > max)
		{
			max = arr[i];
		}
	}
	printf("%d\n", max );
	return 0 ;
}


//打印九九乘法表
//根据其行数和列数来确定，分为两个循环，外层打印行数，内层打印列数，
#include<stdio.h>
int main()
{
	int i = 0 ;
	for(i=1; i<=9; i++) //行数
	{
		int j = 1 ;
		for(j=1; j<=i; j++) //且列数小于等于行数
		{
			printf("%d*%d=%-2d ",i,j,i*j); //注意回车的打印位置 //-2d中 -表示左对齐，2表示2位
		}
		printf("\n"); //当内层的循环进行完后，再打印回车符号
	}
	return 0 ;
}


//二分法查找
//前提是数组是有顺序的。
#include<stdio.h>
int main()
{
	int arr[] = {2,3,4,5,6,7,8,9,10,12};
	int k = 12 ;
	int sz = sizeof(arr) / sizeof(arr[0]) ;
	int left = 0 ;
	int right = sz - 1 ; //这里不是字符串,不是-2
	while(left <= right)
	{
		int mid = (left + right)/2 ;
		if(arr[mid] > k)
		{
			right = mid - 1;
		}
		else if(arr[mid] < k)
		{
			left = mid + 1;
		}
		else
		{
		     printf("下标是：%d\n", mid );
		     break;
		}
	}
	if(left >= right)
	{
		printf("找不到\n") ;
	}
	return 0;
}


//简单的猜数字游戏
//涉及time函数和rand随机值函数
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void menu()
{
	printf("*************************************\n");
	printf("****  1.start game  2.exit game  ****\n");
	printf("*************************************\n");
}

 
    //#define RAND_MAX 0x7fff //-0x开头为十六进制数，值为7fff，十进制为32767
    
    //time_t time(time_t *timer)
    //time_t

void game()
{
	//1.先生成一个随机数
	//2.猜数字
	int guess = 0 ;
	int ret = 0 ; //rand()的值再0到RAND_MAX(32767)之间
	srand((unsigned int)time(NULL)); 
	
	//设置rand()，不然每次的结果都一样
	//srand中的数应为一个随机数
	//时间戳！一个时刻变化的数字
	//从1970.1.1的0:0:0开始到现在(xxxx)单位是秒(s)。

	ret = rand()%100+1 ; //生成一个1-100的随机数
        //这里之所以取除以100的余数，是因为除以100后，余数一定是1-99之间，再加1，范围就是1-100。

	//printf("请猜数字:>");
	//scanf("%d",&guess);  //这个地方不能写printf和scanf
	//会导致下面进入死循环！！！
	
	while(1) //条件恒为真！
	{
		printf("请猜数字:>");
		scanf("%d",&guess);
		if(ret>guess)
		{
			printf("猜小了！\n");
		}
		else if(ret<guess)
		{
			printf("猜大了！\n");
		}
		else
		{
			printf("恭喜你，猜对了！数字就是：%d\n", guess);
			break ;
		}
	}
}

int main() //主函数，实现主要部分
{
	int input = 0 ;
	
	do
	{
		menu() ;
		printf("请选择:>\n");
		scanf("%d", &input);
		if(input == 1)
		{
			game();
		}
		else if(input == 0)
		{
			printf("退出游戏！\n");
		}
		else
		{
			printf("选择错误!\n");
		}

	}while(input) ;
	return 0 ;
}


//命令关机程序
//goto语句，做好标记后，goto返回到标记的地方。
#include<stdio.h>
#include<Windows.h> //系统命令函数system头文件
#include<string.h> //字符串函数strcmp头文件
int main()
{
	char arr[20] = {0} ;
	system("shutdown -s -t 60"); //关机 在 60s后
again:
	printf("你的电脑将在1分钟后关闭，输入:“我是猪！”即可阻止。\n告诉我，你是猪么？\n");
	scanf("%s", arr); //字符串储存再字符型数组中
	if(strcmp(arr,"我是猪！") == 0) //比较两个字符串 //strcmp库函数的用法在上面已经讲过
	{
		system("shutdown -a"); //取消关机
	}
	else
	{
		goto again ; //返回到again的地方
	}

	return 0;
}


//用while代替
#include<stdio.h>
#include<Windows.h>
#include<string.h>
int main()
{
	char arr[20] = {0} ;
	system("shutdown -s -t 60");
    while(1)
	{
	printf("你的电脑将在1分钟后关闭，输入:“我是猪”即可阻止。\n告诉我你是猪么？\n");
	scanf("%s",arr);
	if(strcmp(arr,"我是猪！") == 0)
	{
		system("shutdown -a");
		printf("哈哈哈，我就知道你是只猪！\n");
		break ;
	}
	if(strcmp(arr,"我是猪") == 0)
	{
		printf("不对哦，在后面加个“！”试试吧！\n");
	}
	}
	return 0;
}


🎃🎃🎃

函数和递归

//库函数的使用

//字符串函数strcpy
//char * strcpy ( char * destination, const char * source );
//括号中先是：目的地的指针地址，后面是：原指针地址
//作用是：在目的字符串里拷贝一份原字符串的内容，包括\0。
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "bit";
	char arr2[20] = "1234";

	strcpy(arr2,arr1);
	printf("%s\n",arr2);

	return 0 ;
}


//函数memset
//作用：更改字符串内的字符
//void * memset ( void * ptr, int value, size_t num );
//括号内第一个放指针，第二个放值，第三个放数字。
//数字不能超过原字符串的长度，会溢出！

/* memset example */
#include <stdio.h>
#include <string.h>

int main ()
{
  char str[] = "almost every programmer should know memset!";
  memset (str, '-', 6); //这里数字不能超过原字符串的长度，会溢出！
  puts (str); //puts打印str
  
  return 0;
}


//自定义函数

//使用函数达成交换
void Swap1(int x ,int y) //不会成功交换.. //✨x,y和a,b没有直接关系 //x,y形参
{
	int tmp = 0;
	tmp = x ; //无论这里是x,y还是a,b都不行
	x = y ;
	y = tmp ;
}
void Swap2(int* x , int * y) //🏀交换成功 //使用指针地址 //x,y形参 //传址函数
{
	int tmp = 0;
	tmp = *x;
	*x = *y;
	*y = tmp;
}
#include<stdio.h>
int main()
{
	int a = 10 ;
	int b = 20 ;
	printf("%d %d\n", a ,b);
	// Swap1(a , b);
	Swap2(a , b); //a,b实参
	printf("%d %d\n", a ,b);

	return 0;
}


//形参：形式参数 - 函数名后括号中的变量，因为形参只有在函数被调用的过程中才实例化（分配内存单元），所以叫形参。
//形参当函数调用完成后就自动销毁了，因此形参只在函数中有效。
//形参实例化之后其实就相当于实参的一份临时拷贝
//实参：实际参数 - 真是传给函数的参数
//实参可以是：常量、变量、表达式、函数等。
//无论实参是何种类型的量，在进行函数调用时，他们都必须又确定的值，以便把这些值传送给形参。

//求两个数的较大值
int get_max(int a , int b) //传值函数
{
	int z = 0;
	z = (a>b) ? a : b ;
	return z ;
}
#include<stdio.h>
int main()
{
	int a = 0 ;
	int b = 0;
	int max = 0;
	scanf("%d%d",&a , &b);
	max  = get_max(a , b); //这里的a,b都是实参
	printf("max = %d",max );
	return 0 ;
}


//exercises

//函数判断是否为素数
#include<math.h>
int is_prime(int i)
{
	int a = 0;
	for(a=2; a<i/2; a++)
	{
		if(i%a == 0)
			return 0;
	}
	//if(a == i) //这里可以不用判断
		return 1;
	
}
#include<stdio.h>
#include<math.h>
int main()
{
	int i = 0 ;
	int count = 0;
	for(i=100; i<=200; i++)
	{
		if(is_prime(i))
		{
			printf("%d ",i);
			count++;
		}
	}
	printf("\n%d",count);
	return 0;
}


//✨用函数实现二分查找
//                    ↓本质上arr是一个指针
int binary_search(int arr[], int i , int sz)
{
	int left = 0;
	int right = sz ; //所以将求sz的步骤放在主函数中，不然求到的sz不是数组的大小 sz错误结果为1
	while(left <= right)
	{
		int mid = (left + right) / 2;
		if(i<arr[mid])
		{
			right = mid - 1; //当i小于中间元素时，右端重新赋值为原中间元素-1
		}
		else if(i>arr[mid])
		{
			left = mid + 1; // 当i大于中间元素时，右端重新赋值为原中间元素+1
		}
		else
		{
			return mid ;
		}
	}
	//if(left > right) //不用写
		return -1 ;
}


#include<stdio.h>
int main()
{
	int arr[] = {0,1,2,3,4,5,6,7,8,9};
	int k = 7 ;
	int sz = sizeof(arr) / sizeof(arr[0]) - 1;
	//                         ↓arr传递到函数中的是数组的首元素的地址
	int result = binary_search(arr,k,sz) ;

	printf("%d\n",result);
	return 0;
}


//每调用一次这个函数，num的值将增加1
int ADD(int * p)
{
	//*p++; //不能写*p++的原因是：++的优先级大于*，会导致先进行++后进行*
	(*p)++ ;🏀
}

#include<stdio.h>
int main()
{
	int num = 0;
	ADD(&num);
	printf("num = %d\n",num);

	ADD(&num);
	printf("num = %d\n",num);

	ADD(&num);
	printf("num = %d\n",num);

	return 0 ;
}


//嵌套
//链式访问
#include<stdio.h>
int main()
{
	printf("%d", printf("%d", printf("%d", 40))); //它的值是其打印的数字个数
	//printf函数
	//Return Value
	//Each of these functions returns the number of characters printed, or a negative value.
	return 0 ;
}


//函数声明

int Add(int x , int y); //;不能忘!!! //在前面声明，不然会识别不到

#include<stdio.h>
int main()
{
	int a = 10 ;
	int b = 20 ;
	int sum = 0;
	sum = Add(a,b);
	printf("%d\n",sum);
	return 0;
}

//函数定义
int Add(int x ,int y)
{
	int z = x + y;
	return z; 
}


//又可以将函数的声明放在头文件中，将定义放在源文件中

add.h
#ifndef __Add_H__ //如果Add.h这个头文件没有被定义，才向下执行 //防止多次引用，占据内存空间
#define __Add_H__

//函数声明
int Add(int x , int y); //;不能忘!!!

#endif

add.c
//函数定义
int Add(int x ,int y)
{
	int z = x + y;
	return z; 
}

//调用
#include<stdio.h>
#include"add.h" //调用自己写的函数用""
int main()
{
	int a = 10 ;
	int b = 20 ;
	int sum = 0;
	sum = Add(a,b);
	printf("%d\n",sum);
	return 0;
}


//函数递归🐉🐉🐉

//递归的两个必要条件：
1.存在限制条件，当满足这个限制条件的时候，递归便不再继续
2.每次递归调用之后越来越接近这个限制条件。

#define _CRT_SECURE_NO_WARNINGS 1

//递归
//接受一个整型值（无符号），按照顺序打印它的每一位
#include<stdio.h>
void print(int n) //1234
{
	if(n>9)
	{
		print(n/10);
	}
	printf("%d ",n%10);
}

int main()
{
	unsigned int num = 0 ;
	scanf("%d", &num) ;
	//递归

	print(num);
	//依次将执行如下步骤
	//print(1234)
	//print(123) 4
	//print(12) 3 4
	//print(1) 2 3 4

	return 0;
}


//用函数计算一个字符串的大小
#include<stdio.h>

//int my_strlen(char* str)
//{
//	int count = 0; //题目要求不能创建临时变量
//	while(*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count ;
//}

//递归的方法
int my_strlen(char* str)
{
	if(*str != '\0') //字符不等于\0
	{
		return 1 + my_strlen(str+1); //地址加1，沿至下一个字符
	}
	else
		return 0;
}
//把大事化小
//my_strlen("hello world!")
//1 + my_strlen("ello world!")
//...
//11 + my_strlen("!")
//12 + my_strlen("")

int main ()
{
	char arr[] = "hello world!";
	//int len = strlen(arr); //求字符串长度
	//printf("%d\n", len);

	//模拟实现了一个strlen 函数
	int len = my_strlen(arr); //arr是数组，数组传参，传过去的是数组的首元素地址，而不是整个数组。

	printf("len = %d\n", len);
	return 0;
}


//认识库函数malloc
//作用：malloc为动态内存分配函数，用于申请一块连续的指定大小的内存块区域以void*类型（转换为我们需要的类型）返回分配的内存区域地址
// malloc example: random string generator //随机字符串生成

#include <stdio.h>      // printf, scanf, NULL
#include <stdlib.h>     // malloc, free, rand 

int main ()
{
  int i,n;
  char * buffer;

  printf ("How long do you want the string? \n");
  scanf ("%d", &i);

  buffer = (char*) malloc (i+1); 
  //也可以这样写：buffer = (char*) malloc((i+1)*sizeof(char));
  //i+1乘以sizeof(char)意思即：i+1个类型为char的内存空间
  //malloc函数返回的是无类型指针
  //使用时一定要注意一定要强制转换为所需要的类型
  //buffer是指向char类型，大小为i+1的数组。
  
  if (buffer == NULL) exit (1); //exit (1)表示异常退出

  for (n=0; n<i; n++)
    buffer[n] = rand()%26 + 'a'; //buffer缓冲区//rand%26的余数范围是1-25，所以字符串中字符范围为26个小写字母。
  buffer[i] = '\0'; //第i+1个字符为'\0'

  printf ("Random string: %s\n",buffer);
  free (buffer);//在使用malloc开辟空间时，使用完成一定要释放空间
  //如果不释放会照成内存泄漏。

  return 0;
}


//库函数calloc
//与malloc的区别是：malloc和calloc之间的不同点是，malloc不会设置内存为零，而calloc会设置分配的内存为零。
#include <stdio.h>
#include <stdlib.h>
 
int main()
{
   int i, n;
   int *a;
 
   printf("要输入的元素个数：");
   scanf("%d",&n);
  //                ↓这个n为数组的大小
   a = (int*)calloc(n, sizeof(int));
   printf("输入 %d 个数字：\n",n);
   for( i=0 ; i < n ; i++ ) 
   {
      scanf("%d",&a[i]); //储存输入的数字
   }
 
   printf("输入的数字为：");
   for( i=0 ; i < n ; i++ )
   {
      printf("%d ",a[i]); //打印输入的数字
   }
   free (a);  // 释放内存
   return(0);
}


//函数的递归和迭送
//求n的阶乘
#include<stdio.h>
//int Fac1(int n)
//{
//	int i = 0;
//	int ret = 1 ;
//	for(i=1;i<=n;i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}

int Fac2(int n)
{
	if(n<=1) //即若 n等于1，返回1
	{
		return 1 ;
	}
	else
	{
		return n * Fac2(n-1) ; //若n大于1则返回n * Fac2(n-1)
	}
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d",&n);
	//ret = Fac1(n);
	ret = Fac2(n);
	//TDD - 测试驱动开发（思路为：先考虑函数怎么用，在想函数怎么定义）
	printf("%d\n",ret); //循环的方式 //递归
	return 0;
}


//1 1 2 3 5 8 13 21 34 55
//描述第n个斐波那契数
//使用递归的方法较为复杂，建议使用循环的方式
//
#include<stdio.h>
int count = 0;
int Fib(int n)
{
	if(n==3)
	{
		count++; //计算n=3这个斐波那契数被使用了多少次
	}
	if(n<=2)
	{
		return 1;
	}
	else
	{
		return Fib(n-1) + Fib(n-2);
	}
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d",&n);
	ret = Fib(n);
	printf("ret = %d\n",ret);
	printf("count = %d\n",count);
	return 0;
}


//在使用递归时，要注意效率和栈溢出✨
//使用循环去完成，后边数字越来越大时，会出现负数
#include<stdio.h>
int Fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;

	while(n>2)
	{
		c = a+b;
		a = b;
		b = c;
		n--;
	}

	return c;
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d",&n);
	ret = Fib(n);
	printf("ret = %d\n",ret);
	return 0;
}


//数组🦈🦈🦈


//数组的初始化
//对比sizeof和strlen
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc" ;
	char arr2[] = {'a','b','c',0};
	printf("%d\n",strlen(arr1)); //output:3
	printf("%d\n",sizeof(arr1)); //output:4

	return 0;
}

//
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc" ;
	char arr2[] = {'a','b','c'};
	printf("%d\n",strlen(arr2)); //output:Random value
	printf("%d\n",sizeof(arr2)); //output:3
	
        return 0 ;
  }
//'\0'是字符串结束的标志，不算做字符串的内容

//strlen 和sizeof没有什么关联
//strlen 是求字符串长的 - 只能求字符串长的 - 库函数 - 使用头文件
//sizeof 计算变量、数组、类型的大小 - 单位是字节 - 操作符

//对于二维数组的初始化
//
#include<stdio.h>
int main()
{
  int arr[][4] = {1,2,3,4,5,6,7};
  //行的下标可以不写，但列的下标一定得写
  return 0;
}


//二维数组的各项的值
//指针地址两个之间相差4
#include<stdio.h>
int main()
{
	int arr[3][4] = {{1,2,3},{4,5}};
	int i = 0;
	for(i=0;i<3;i++)
	{
		int j = 0;
		for(j=0;j<4;j++)
		{
			printf("%d ",arr[i][j]);
		}
		printf("\n");
	}
	return 0;
}


//冒泡法排序
void bubble_sort(int arr[] , int sz)
{
	//确定冒泡排序的趟数
	int i = 0;
	for(i=0; i<sz-1; i++) //i从0开始所以i<sz-1，不用加= 。
	{
	        int flag = 1; //假设这个数组已经是升序

		//每一趟冒泡排序
		int j = 0;
		for(j=0; j<sz-1-i; j++)
		{
			if(arr[j] > arr[j+1])
			{
			int temp = arr[j];
			arr[j] = arr[j+1];
			arr[j+1] = temp;
			flag = 0; //发生了交换，不是升序
			}
		}
	if(flag == 1) //判断是否是升序
	{
	break;
        }

	}
}

#include<stdio.h>
int main()

{
	int arr[] = {8,9,7,1,2,3,4,5,6,0};
	int sz = sizeof(arr) / sizeof(arr[0]);
	//对arr进行排序，排成升序
	//arr是数组，我们对数组arr进行传参，实际上传递过去的是数组arr首元素的地址，&arr[0]
	int i = 0;
	bubble_sort(arr , sz);
	//冒泡法排序函数
	for(i=0; i<=sz-1; i++)
	{
		printf("%d ",arr[i]);
	}
	return 0;
}


//数组的名字arr的意义✨
#include<stdio.h>
int main()
{
	int arr[] = {1,2,3,4,5,6,7};
	printf("%p\n",arr);
	printf("%p\n",arr+1);

	printf("%p\n",&arr[0]);
	printf("%p\n",&arr[0]+1);

	printf("a = %p\n",&arr); //&arr是数组的地址
	printf("b = %p\n",&arr+1);
	//a和b相差28（arr数组的大小）
	return 0;

}


//arr的一些情况🐲
//1.sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组。
//
//2.&数组名，取出的是数组的地址。&数组名，数组名表示整个数组。
#include<stdio.h>
int main()
{
	int arr[10] = {0};
	printf("%d\n",sizeof(arr)); //40
	return 0;
}

//除此1，2两种情况之外，所有的数组名都表示数组首元素的地址。


//🤖面试题
#define _CRT_SECURE_NO_WARNINGS 1

//不添加第三个变量，让 a 和 b的值交换 
#include<stdio.h>
int main()
{
	int a = 5 ;
	int b = 3 ;
	printf("a = %d b = %d\n",a,b);

	//可能会出现溢出的情况
	//a = a - b ; //a 为 a-b
	//b = a + b ; //b 为 a
	//a = b - a ; //a 为 b

	//按位异或，不会溢出
	a = a^b ;
	b = a^b ;
	a = a^b ;

	printf("a = %d b = %d\n",a,b);
	return 0;
}

//但在企业中
//采用第三个变量的方法，代码的可读性高，效率高
//按位异或的方法，可读性差，效率低于其他方法



//在整型数组中找到唯一一个出现过一次的数
//暴力求解 //比较繁琐
#include<stdio.h>
int main()
{
	int i = 0;
	int j = 0 ;
	//int count = 0; //不能放在这儿
	int arr[] = {1,2,3,4,5,1,2,3,4};
	int sz = sizeof(arr) / sizeof(arr[0]);
	for(i=0; i< sz ;i++)
	{
		int count = 0 ; //必须放在for循环里面！！！
		
		for(j=0; j<sz; j++)
		{
			if(arr[i] == arr[j])
			{
				count++;
			}
		}
	
	if(count == 1)
	{
		printf("单身狗是：%d\n",arr[i]);
		break;
	}
	}
	return 0;
}


//上面改进✨
//1.按位异或(^)：如果两个相应的二进制位值不同为1,相同为为0。
//2.按位与(&)：如果两个相应的二进制位都为1,则该位的结果值为1,否则为0。

//按位异或 满足交换律
//当两个相同的数按位异或时，结果为0，例如：3^3 = 0;
//0按位异或任意一个数，都是任意数的本身
#include<stdio.h>
int main()
{
	int i = 0;
	int ret = 0;
	// 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 1 ^ 2 ^ 3 ^ 4 = 5
	//
	int arr[] = {1,2,3,4,5,1,2,3,4};
	int sz = sizeof(arr) / sizeof(arr[0]);
	for(i=0; i<sz ;i++)
	{
		ret = ret ^arr[i];
	}
	printf("单身狗是：%d\n",ret);
	return 0;
}



//操作符详解💀💀💀

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	//int a = 5 / 2 ; //商2余1 //整数相除取值为商
	//double a = 5 / 2.0; // 分子或分母其中有一个为小数
	//double a = 5 % 2; //取余数时，前后两端均为整数

	//int a = 16 ; 
	int a = -16 ;
	int b = 0 ;
	b = a >>1 ;
	// >>变为二进制之后向右移一位
	// <<向左移一位
	// 注意！！！
	// 它的最高位是符号位！

	//printf("a = %d\n", a);
	printf("a = %d\n", b);
	return 0;
}

//右移操作符
//算术右移：右边丢弃，左边补上符号位  √

//逻辑右移：右边丢弃，左边补上 0      ×

