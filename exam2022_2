#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
 

//错误：bug
//找bug：调试

//结构体
//结构体是由一批数据组合而成的一种新的数据类型，组成结构型数据的每个数据称为结构型数据的“成员”
//先声明，再创建变量
struct stu//stu结构体标签 //结构体声明
{
	char name[20] ;//member-list成员列表
	short age ;
	char tele[12];
	char set[5] ;

}s1 ,s2 ,s3;//variable-list;变量列表 //s1,s2,s3是全局变量



typedef struct stu//typedef 重命名结构体变量名称
{
	char name[20] ;//member-list成员列表
	short age ;
	char tele[12];
	char set[5] ;

}stu;//stu是类型（struct stu也是） 
int main()
{
	struct stu s1 ; //这里是在创建结构体变量 - 局部变量
	stu s2 ;
	return 0 ;
}


// 描述一个学生-一些数据
// 名字
// 年龄
// 电话
// 性别
struct S
{
	int a ;
	char c;
	char arr[20];
	double d;
};

struct T
{
	char ch[10];
	struct S s; //struct S只是类型！！后面需要有变量名！ //结构体声明中可以包含结构体
	char *pc ;
};

int main()
{
	char arr[] = "hello bit\n";
	struct T t = {"hehe",{100, 'w', "hello world!", 3.14}, arr};

	printf("%s\n",t.ch); //hehe
	printf("%d\n",t.s.a); //100
	printf("%lf\n",t.s.arr); //hello world!
	printf("%s\n",t.pc); //hello bit


	return 0;
}



typedef struct Stu
{
	char name[20] ;
	short age ;
	char tele[12];
	char sex[5] ;

}Stu;

void Print1(Stu tmp)
{
	printf("name: %s\n",tmp.name);
	printf("age: %d\n",tmp.age);
	printf("tele: %s\n",tmp.tele);
	printf("sex: %s\n",tmp.sex);
}

void Print2(Stu* ps)
{
	printf("name: %s\n",ps->name);
	printf("age: %d\n",ps->age);
	printf("tele: %s\n",ps->tele);
	printf("sex: %s\n",ps->sex);
}
int main()
{
	Stu s = {"李四", 40, "15599887788","男"};
	//打印结构体数据
	//Print1和Print2哪个好？
	Print1(s);

	//选用Print2函数
	// 传递的是结构体名时，需要另外开辟一块空间
	//函数传参的时候，参数是需要压栈的。
	//如果传递一个结构以对象的时候，若结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降。

	Print2(&s); //传递的是结构体的地址
	//结论：结构体传参的时候，要传递结构体的地址。
	return 0 ;
}
